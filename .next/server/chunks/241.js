"use strict";exports.id=241,exports.ids=[241],exports.modules={9241:(e,t,r)=>{r.r(t),r.d(t,{createOrReadKeyless:()=>createOrReadKeyless,removeKeyless:()=>removeKeyless,safeParseClerkFile:()=>safeParseClerkFile});var s,i,n,l=r(2547);r(8035),r(9637),r(6875);var o=r(5681);s=l.WX,async(...e)=>{let{data:t,errors:r}=await s(...e);if(r)throw r[0];return t};var a=r(9990);let c={secretKey:a.Cn,publishableKey:a.Am,apiUrl:a.T5,apiVersion:a.Gn,userAgent:"@clerk/nextjs@6.18.0",proxyUrl:a.NM,domain:a.yK,isSatellite:a.lo,sdkMetadata:a.nE,telemetry:{disabled:a.CY,debug:a.w4}},createClerkClientWithOptions=e=>(function(e){let t={...e},r=(0,l.gf)(t),s=(0,l.sA)({options:t,apiClient:r}),i=new o.NS({...e.telemetry,publishableKey:t.publishableKey,secretKey:t.secretKey,samplingRate:.1,...t.sdkMetadata?{sdk:t.sdkMetadata.name,sdkVersion:t.sdkMetadata.version}:{}});return{...r,...s,telemetry:i}})({...c,...e});var d=Object.getOwnPropertyNames,u=(i={"src/runtime/node/safe-node-apis.js"(e,t){let{existsSync:s,writeFileSync:i,readFileSync:n,appendFileSync:l,mkdirSync:o,rmSync:a}=r(9521),c=r(9411);t.exports={fs:{existsSync:s,writeFileSync:i,readFileSync:n,appendFileSync:l,mkdirSync:o,rmSync:a},path:c,cwd:()=>process.cwd()}}},function(){return n||(0,i[d(i)[0]])((n={exports:{}}).exports,n),n.exports});let h=u(),throwMissingFsModule=e=>{throw Error(`Clerk: ${e} is missing. This is an internal error. Please contact Clerk's support.`)},nodeFsOrThrow=()=>(h.fs||throwMissingFsModule("fs"),h.fs),nodePathOrThrow=()=>(h.path||throwMissingFsModule("path"),h.path),nodeCwdOrThrow=()=>(h.cwd||throwMissingFsModule("cwd"),h.cwd),g=".clerk",f="clerk.lock",generatePath=(...e)=>{let t=nodePathOrThrow(),r=nodeCwdOrThrow();return t.join(r(),g,...e)},y=".tmp",getKeylessConfigurationPath=()=>generatePath(y,"keyless.json"),getKeylessReadMePath=()=>generatePath(y,"README.md"),w=!1;function safeParseClerkFile(){let{readFileSync:e}=nodeFsOrThrow();try{let t;let r=getKeylessConfigurationPath();try{t=e(r,{encoding:"utf-8"})||"{}"}catch{t="{}"}return JSON.parse(t)}catch{return}}let lockFileWriting=()=>{let{writeFileSync:e}=nodeFsOrThrow();w=!0,e(f,"This file can be deleted. Please delete this file and refresh your application",{encoding:"utf8",mode:"0777",flag:"w"})},unlockFileWriting=()=>{let{rmSync:e}=nodeFsOrThrow();try{e(f,{force:!0,recursive:!0})}catch{}w=!1},isFileWritingLocked=()=>{let{existsSync:e}=nodeFsOrThrow();return w||e(f)};async function createOrReadKeyless(){let{writeFileSync:e,mkdirSync:t}=nodeFsOrThrow();if(isFileWritingLocked())return null;lockFileWriting();let r=getKeylessConfigurationPath(),s=getKeylessReadMePath();t(generatePath(y),{recursive:!0}),function(){let{existsSync:e,writeFileSync:t,readFileSync:r,appendFileSync:s}=nodeFsOrThrow(),i=nodePathOrThrow(),n=nodeCwdOrThrow(),l=i.join(n(),".gitignore");e(l)||t(l,"");let o=r(l,"utf-8");o.includes(g+"/")||s(l,`
# clerk configuration (can include secrets)
/${g}/
`)}();let i=safeParseClerkFile();if((null==i?void 0:i.publishableKey)&&(null==i?void 0:i.secretKey))return unlockFileWriting(),i;let n=createClerkClientWithOptions({}),l=await n.__experimental_accountlessApplications.createAccountlessApplication().catch(()=>null);if(l){e(r,JSON.stringify(l),{encoding:"utf8",mode:"0777",flag:"w"});let t=`
## DO NOT COMMIT
This directory is auto-generated from \`@clerk/nextjs\` because you are running in Keyless mode. Avoid committing the \`.clerk/\` directory as it includes the secret key of the unclaimed instance.
  `;e(s,t,{encoding:"utf8",mode:"0777",flag:"w"})}return unlockFileWriting(),l}function removeKeyless(){let{rmSync:e}=nodeFsOrThrow();if(!isFileWritingLocked()){lockFileWriting();try{e(generatePath(),{force:!0,recursive:!0})}catch{}unlockFileWriting()}}}};